import sqlite3
import os
import vk_api
import urllib.request
import random
import string
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.utils import get_random_id
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.upload import VkUpload

db_path = "./users.sqlite"
memes_path = "./memes/"
group_link = "vezdemem"
group_id = "212547232"
album_id = "283603783"
app_id = 8131807

# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
# "" - –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
# default - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# rating - –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ü–µ–Ω–∫–∞ –º–µ–º–∞ current_meme
# upload - –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–∫–∞—Ä—Ç–æ—á–∫–∞ –≤–æ –≤–ª–æ–∂–µ–Ω–∏–∏
# showcase_* - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–æ—á–∫–∏

class Bot:
    def __init__(self, token_bot, token_upload):
        self.api = vk_api.VkApi(token=token_bot)
        self.longpoll = VkBotLongPoll(self.api, group_id)
        self.upload_api = vk_api.VkApi(token=token_upload)
        self.upload = VkUpload(self.upload_api)
        self.db = sqlite3.connect(db_path)

        self.sync_memes()
    def __del__(self):
        self.db.close()
    def loop(self):
        for event in self.longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                peer_id = event.obj.peer_id or event.message.peer_id
                user_id = event.obj.message['from_id']
                user_state = self.get_user_state(user_id)
                response = str(event.obj.text or event.message.text).casefold()
                if response.startswith(f"[club{group_id}|@{group_link}] "):
                    response = response.split(' ', 1)[1]
                print(user_id)
                print(user_state)
                print(response)
                print('*'* 30)
                if response == "–ø—Ä–∏–≤–µ—Ç":
                    self.send_message(peer_id, "–ü—Ä–∏–≤–µ—Ç –í–µ–∑–¥–µ–∫–æ–¥–µ—Ä–∞–º!")
                elif response == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                    likes, dislikes = self.get_user_stats(user_id)
                    user_stats = f'''–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–õ–∞–π–∫–æ–≤: {likes}\n–î–∏–∑–ª–∞–π–∫–æ–≤: {dislikes}\n\n'''
                    likes, dislikes = self.get_summary_stats()
                    summary_stats = f'''–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–õ–∞–π–∫–æ–≤: {likes}\n–î–∏–∑–ª–∞–π–∫–æ–≤: {dislikes}\n\n'''
                    top_memes = self.get_top_memes()
                    top_memes_stats = "\n".join(f"{n}. {i[1]} –ª–∞–π–∫–æ–≤ [https://vk.com/photo-{group_id}_{i[0]}]" for n, i in enumerate(top_memes, start=1)) # –±—É–±—ã–ª–¥–∞
                    attachments = ",".join(f"photo-{group_id}_{i[0]}" for i in top_memes)
                    self.send_message(peer_id, user_stats + summary_stats + top_memes_stats, attachments=attachments)
                elif user_state == "default":
                    if response == "–º–µ–º":
                        meme_id = self.get_meme(user_id)
                        if meme_id == "":
                            keyboard = self.get_keyboard("default")
                            self.send_message(peer_id, "–ú–µ–º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ. –¢–∞–∫ –∂–µ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–µ–º—ã –∫–æ–º–∞–Ω–¥–æ–π \"–î–æ–±–∞–≤–∏—Ç—å –º–µ–º\".", keyboard=keyboard)
                        else:
                            self.set_user_state(user_id, "rating", meme_id)
                            keyboard = self.get_keyboard("rating")
                            photo_url = f"photo-{group_id}_{meme_id}"
                            self.send_message(peer_id, attachments=[photo_url], keyboard=keyboard)
                    elif response == "–¥–æ–±–∞–≤–∏—Ç—å –º–µ–º":
                        self.set_user_state(user_id, "upload")
                        keyboard = self.get_keyboard("upload")
                        self.send_message(peer_id, "–ü—Ä–∏—à–ª–∏ –º–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ —è –µ–≥–æ –¥–æ–±–∞–≤–ª—é.", keyboard=keyboard)
                elif user_state == "upload":
                    if response == "–æ—Ç–º–µ–Ω–∞":
                        self.set_user_state(user_id, "default")
                        keyboard = self.get_keyboard("default")
                        self.send_message(peer_id, "–ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–º –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç!", keyboard=keyboard)
                    else:
                        memes_found = False
                        for attach in event.obj.message['attachments']:
                            if attach['type'] == "photo":
                                memes_found = True
                                meme_id = self.reupload_photo(attach['photo'])
                                self.add_meme(meme_id)
                        if memes_found:
                            self.set_user_state(user_id, "default")
                            keyboard = self.get_keyboard("default")
                            self.send_message(peer_id, "–ú–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", keyboard=keyboard)
                        else:
                            self.send_message(peer_id, "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–º–∞ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É.")
                elif user_state == "rating":
                    meme_id = self.get_user_current_meme(user_id)
                    if response == "üëç":
                        self.set_user_state(user_id, "default")
                        self.set_user_reaction(user_id, meme_id, 1)
                        keyboard = self.get_keyboard("default")
                        self.send_message(peer_id, "–ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!", keyboard=keyboard)
                    elif response == "üëé":
                        self.set_user_state(user_id, "default")
                        self.set_user_reaction(user_id, meme_id, -1)
                        keyboard = self.get_keyboard("default")
                        self.send_message(peer_id, "–ì–æ–ª–æ—Å —É—á—Ç—ë–Ω!", keyboard=keyboard)
                    else:
                        keyboard = self.get_keyboard("rating")
                        self.send_message(peer_id, "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ü–µ–Ω–∏—Ç–µ –º–µ–º.", keyboard=keyboard)
                elif user_state == "":
                    self.create_user(user_id)
                    self.set_user_state(user_id, "showcase_1")
                    self.send_message(peer_id, "–ü—Ä–∏–≤–µ—Ç, –ø–æ –¢–ó —Ç—É—Ç –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–≥–∞-–∫—Ä—É—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–º–æ–≥–∏ –º–Ω–µ —Å —ç—Ç–∏–º –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤!")
                    keyboard = self.get_keyboard("showcase_1")
                    self.send_message(peer_id, "–õ—é–±–∏—à—å –º–µ–º—ã?", keyboard=keyboard)
                elif user_state.startswith("showcase") and response == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã":
                    self.set_user_state(user_id, "default")
                    keyboard = self.get_keyboard("default")
                    self.send_message(peer_id, "–¢–æ–≥–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–∞–º–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º—É!\n–ú–µ–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å. –ö–æ–º–∞–Ω–¥–æ–π \"–ú–µ–º\". –ï—ë —è –¥–∞–º. –û—Ü–µ–Ω–∏—Ç—å –µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ —Å–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é. –ú–Ω–µ–Ω–∏–µ —è –Ω–µ –¥–∞–º.",
                                      keyboard=keyboard)
                elif user_state == "showcase_1":
                    self.set_user_state(user_id, "showcase_2")
                    if response == "–¥–∞":
                        self.send_message(peer_id, "–û—Ç–ª–∏—á–Ω–æ!")
                    elif response == "–Ω–µ—Ç":
                        self.send_message(peer_id, "–ù–∞–¥–µ—é—Å—å, –Ω–∞—à–∏ –º–µ–º—ã —Ç–µ–±–µ –≤—Å—ë-—Ç–∞–∫–∏ –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è!")
                    keyboard = self.get_keyboard("showcase_2")
                    self.send_message(peer_id, "–ö–∞–∫–æ–µ —Ç–≤–æ—ë –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è –≥–æ–¥–∞?", keyboard=keyboard)
                elif user_state == "showcase_2":
                    self.set_user_state(user_id, "showcase_3")
                    self.send_message(peer_id, "–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä!")
                    keyboard = self.get_keyboard("showcase_3")
                    self.send_message(peer_id, "–ê —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 9!", keyboard=keyboard)
                elif user_state == "showcase_3":
                    self.set_user_state(user_id, "showcase_4")
                    keyboard = self.get_keyboard("showcase_4")
                    self.send_message(peer_id, "–ö–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–º—ë—à—å?", keyboard=keyboard)
                elif user_state == "showcase_4":
                    self.set_user_state(user_id, "showcase_5")
                    keyboard = self.get_keyboard("showcase_5")
                    self.send_message(peer_id, "–õ—é–±–∏—à—å –∫–æ—à–µ—á–µ–∫ –∏–ª–∏ —Å–æ–±–∞—á–µ–∫?", keyboard=keyboard)
                elif user_state == "showcase_5":
                    self.set_user_state(user_id, "showcase_6")
                    keyboard = self.get_keyboard("showcase_6")
                    self.send_message(peer_id, "–ö–∞–∫–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è —É –ø–æ–≤–∞—Ä–∞?", keyboard=keyboard)
                elif user_state == "showcase_6":
                    self.set_user_state(user_id, "showcase_7")
                    self.send_message(peer_id, "–•–∞–∞–∞–∞, –∞ —Ç–≤–æ—è—è—è??")
                    keyboard = self.get_keyboard("showcase_7")
                    self.send_message(peer_id, "–ö–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã –ª—é–±–∏—à—å —Å–º–æ—Ç—Ä–µ—Ç—å?", keyboard=keyboard)
                elif user_state == "showcase_7":
                    self.set_user_state(user_id, "showcase_8")
                    keyboard = self.get_keyboard("showcase_8")
                    self.send_message(peer_id, "–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –æ–ø—Ä–æ—Å? –¢–æ–ª—å–∫–æ —á–µ—Å—Ç–Ω–æ!", keyboard=keyboard)
                elif user_state == "showcase_8":
                    self.set_user_state(user_id, "default")
                    keyboard = self.get_keyboard("default")
                    self.send_message(peer_id, "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –º–µ–º—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã \"–ú–µ–º\", –∞ —Ç–∞–∫ –∂–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∏—Ö!",
                                        keyboard=keyboard)

    def get_keyboard(self, state, one_time=False):
        keyboard = VkKeyboard(one_time=one_time)
        if state == "default":
            keyboard.add_button("–ú–µ–º", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("–î–æ–±–∞–≤–∏—Ç—å –º–µ–º", color=VkKeyboardColor.POSITIVE)
            keyboard.add_line()
            keyboard.add_button("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", color=VkKeyboardColor.SECONDARY)
        elif state == "rating":
            keyboard.add_button("üëç", color=VkKeyboardColor.POSITIVE)
            keyboard.add_button("üëé", color=VkKeyboardColor.NEGATIVE)
        elif state == "upload":
            keyboard.add_button("–û—Ç–º–µ–Ω–∞", color=VkKeyboardColor.NEGATIVE)
        elif state == "showcase_1":
            keyboard.add_button("–î–∞", color=VkKeyboardColor.POSITIVE)
            keyboard.add_button("–ù–µ—Ç", color=VkKeyboardColor.NEGATIVE)
            keyboard.add_line()
            keyboard.add_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", color=VkKeyboardColor.SECONDARY)
        elif state == "showcase_2":
            keyboard.add_button("üå∏ –í–µ—Å–Ω–∞", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("‚òÄÔ∏è –õ–µ—Ç–æ", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("‚ùÑÔ∏è –ó–∏–º–∞", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("üçÅ –û—Å–µ–Ω—å", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", color=VkKeyboardColor.SECONDARY)
        elif state == "showcase_3":
            keyboard.add_button("1Ô∏è‚É£", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("2Ô∏è‚É£", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("3Ô∏è‚É£", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("4Ô∏è‚É£", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("5Ô∏è‚É£", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("6Ô∏è‚É£", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("7Ô∏è‚É£", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("8Ô∏è‚É£", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("9Ô∏è‚É£", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", color=VkKeyboardColor.SECONDARY)
        elif state == "showcase_4":
            keyboard.add_button("–≠—Ç—É!", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("–ò–ª–∏ —ç—Ç—É?", color=VkKeyboardColor.NEGATIVE)
            keyboard.add_line()
            keyboard.add_button("–ù–µ—Ç, —ç—Ç—É!", color=VkKeyboardColor.POSITIVE)
            keyboard.add_line()
            keyboard.add_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", color=VkKeyboardColor.SECONDARY)
        elif state == "showcase_5":
            keyboard.add_button("üêà –ö–æ—à–µ—á–µ–∫", color=VkKeyboardColor.POSITIVE)
            keyboard.add_button("üêï –°–æ–±–∞—á–µ–∫", color=VkKeyboardColor.POSITIVE)
            keyboard.add_line()
            keyboard.add_button("üçΩÔ∏è –ò —Ç–µ, –∏ –¥—Ä—É–≥–∏–µ –æ—á–µ–Ω—å –≤–∫—É—Å–Ω—ã–µ!", color=VkKeyboardColor.NEGATIVE)
            keyboard.add_line()
            keyboard.add_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", color=VkKeyboardColor.SECONDARY)
        elif state == "showcase_6":
            keyboard.add_button("üë®‚Äçüç≥ –ü–û–í–ê–†!!!", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", color=VkKeyboardColor.SECONDARY)
        elif state == "showcase_7":
            keyboard.add_button("–ö–æ–º–µ–¥–∏–∏", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("–£–∂–∞—Å—ã", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("–¢—Ä–∏–ª–ª–µ—Ä—ã", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("–î—Ä–∞–º—ã", color=VkKeyboardColor.PRIMARY)
            keyboard.add_button("–ú—é–∑–∏–∫–ª—ã", color=VkKeyboardColor.PRIMARY)
            keyboard.add_line()
            keyboard.add_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", color=VkKeyboardColor.SECONDARY)
        elif state == "showcase_8":
            keyboard.add_button("–î–∞", color=VkKeyboardColor.POSITIVE)
            keyboard.add_line()
            keyboard.add_button("–î–∞", color=VkKeyboardColor.POSITIVE)
            keyboard.add_button("–î–∞", color=VkKeyboardColor.POSITIVE)
            keyboard.add_line()
            keyboard.add_button("–î–∞", color=VkKeyboardColor.POSITIVE)
            keyboard.add_line()
            keyboard.add_button("This poll sucks", color=VkKeyboardColor.NEGATIVE)
            keyboard.add_line()
            keyboard.add_button("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", color=VkKeyboardColor.SECONDARY)
        return keyboard
    def send_message(self, peer_id, msg="", attachments=None, keyboard=None):
        self.api.method('messages.send', {'peer_id': peer_id,
                                          'random_id': get_random_id(),
                                          'message': msg,
                                          'attachment': attachments,
                                          'keyboard': keyboard.get_keyboard() if keyboard is not None else None})
    def sync_memes(self, offset=0, count=50):
        response = self.upload_api.method('photos.get', {'owner_id': "-" + group_id,
                                                         'album_id': album_id})
        ids = []
        for item in response['items']:
            ids.append((item['id'], 0))
        cur = self.db.cursor()
        cur.executemany('''INSERT OR IGNORE INTO memes (meme_id, rating) 
                           VALUES (?, ?)''', ids)
        self.db.commit()
        if offset + count < response['count']:
            self.sync_memes(offset + count)
    def add_meme(self, meme_id):
        cur = self.db.cursor()
        cur.execute(f'''INSERT INTO memes (meme_id, rating) 
                        VALUES ({meme_id}, 0)''')
        self.db.commit()
    def reupload_photo(self, photo):
        # –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: w > z > y > x > m > s
        max_priority = ""
        photo_url = ""
        for size in photo['sizes']:
            if size['type'] == "w":
                photo_url = size['url']
                break
            elif size['type'] == "z" and max_priority not in ["w"]:
                max_priority = "z"
                photo_url = size['url']
            elif size['type'] == "y" and max_priority not in ["w", "z"]:
                max_priority = "y"
                photo_url = size['url']
            elif size['type'] == "x" and max_priority not in ["w", "z", "y"]:
                max_priority = "x"
                photo_url = size['url']
            elif size['type'] == "m" and max_priority not in ["w", "z", "y", "x"]:
                max_priority = "m"
                photo_url = size['url']
            elif size['type'] == "s" and max_priority not in ["w", "z", "y", "x", "m"]:
                max_priority = "s"
                photo_url = size['url']
        letters = string.ascii_letters + string.digits
        filename = f"{os.path.abspath(os.path.dirname(__file__))}/{''.join(random.choice(letters) for i in range(32))}.jpg" # –±—É–±—ã–ª–¥–∞ ‚Ññ2
        urllib.request.urlretrieve(photo_url, filename)
        photo = self.upload.photo(filename,
                                    album_id=album_id,
                                    group_id=group_id)
        os.remove(filename)
        return photo[0]['id']
    def get_meme(self, user_id):
        cur = self.db.cursor()
        cur.execute(f'''SELECT meme_id FROM memes WHERE meme_id NOT IN ( 
            SELECT meme_id FROM users_reactions WHERE user_id={user_id} 
            ) ORDER BY RANDOM() LIMIT 1''')
        item = cur.fetchone()
        return "" if item is None else item[0]
    def get_user_state(self, user_id):
        cur = self.db.cursor()
        cur.execute(f'''SELECT state FROM users WHERE user_id={user_id}''')
        item = cur.fetchone()
        return "" if item is None else item[0]
    def get_user_current_meme(self, user_id):
        cur = self.db.cursor()
        cur.execute(f'''SELECT current_meme FROM users WHERE user_id={user_id}''')
        item = cur.fetchone()
        return "" if item is None else item[0]
    def get_user_stats(self, user_id):
        cur = self.db.cursor()
        cur.execute(f'''SELECT likes, dislikes FROM users WHERE user_id={user_id}''')
        item = cur.fetchone()
        return (0, 0) if item is None else (item[0], item[1])
    def get_summary_stats(self):
        cur = self.db.cursor()
        cur.execute(f'''SELECT likes, dislikes FROM stats WHERE id=0''')
        item = cur.fetchone()
        return (0, 0) if item is None else (item[0], item[1])
    def get_top_memes(self):
        cur = self.db.cursor()
        cur.execute(f'''SELECT meme_id, rating FROM memes ORDER BY rating DESC LIMIT 9''')
        items = []
        for item in cur.fetchall():
            items.append((item[0], item[1]))
        return items
    def set_user_state(self, user_id, state, current_meme=None):
        cur = self.db.cursor()
        cur.execute(f'''UPDATE users SET state = "{state}", current_meme = "{current_meme}"
                        WHERE user_id={user_id}''')
        self.db.commit()
    def set_user_reaction(self, user_id, meme_id, reaction):
        cur = self.db.cursor()
        cur.execute(f'''INSERT INTO users_reactions (user_id, meme_id, reaction) 
                    VALUES ("{user_id}", "{meme_id}", {reaction})''')
        cur.execute(f'''UPDATE memes SET rating = rating + {reaction} WHERE meme_id={meme_id}''')
        cur.execute(f'''UPDATE users SET {"likes" if reaction > 0 else "dislikes"} = {"likes" if reaction > 0 else "dislikes"} + 1 WHERE user_id={user_id}''')
        cur.execute(f'''UPDATE stats SET {"likes" if reaction > 0 else "dislikes"} = {"likes" if reaction > 0 else "dislikes"} + 1 WHERE id=0''')
        self.db.commit()
    def create_user(self, user_id):
        cur = self.db.cursor()
        cur.execute(f'''INSERT INTO users (user_id, likes, dislikes) 
                        VALUES ({user_id}, 0, 0)''')
        self.db.commit()

def __init_db():
    db = sqlite3.connect(db_path)
    cur = db.cursor()
    cur.execute('''CREATE TABLE stats (
        id INTEGER PRIMARY KEY CHECK (id = 0),
        likes INTEGER NOT NULL DEFAULT 0,
        dislikes INTEGER NOT NULL DEFAULT 0
        )''')
    cur.execute('''INSERT OR REPLACE INTO stats (id, likes, dislikes) VALUES (0, 0, 0)''')
    cur.execute('''CREATE TABLE users (
        user_id INTEGER PRIMARY KEY,
        state TEXT,
        current_meme TEXT,
        likes INTEGER,
        dislikes INTEGER
        )''')
    cur.execute('''CREATE TABLE users_reactions (
        user_id INTEGER,
        meme_id INTEGER,
        reaction INTEGER,
        UNIQUE(user_id, meme_id)
        )''')
    cur.execute('''CREATE TABLE memes (
        meme_id INTEGER PRIMARY KEY,
        rating INTEGER NOT NULL DEFAULT 0
        )''')
    db.commit()
    db.close()

if __name__ == "__main__":
    if not os.path.isfile(db_path):
        __init_db()
    token_bot = ""
    with open("./token_bot.txt", "r") as token:
        token_bot = token.read()
    token_upload = ""
    with open("./token_upload.txt", "r") as token:
        token_upload = token.read()
    bot = Bot(token_bot, token_upload)
    bot.loop()
